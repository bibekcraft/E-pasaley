// import React, { useEffect, useState } from 'react';
// import { useDispatch, useSelector } from 'react-redux';
// import { fetchProduct } from '../slice/ProductSlice';
// import { fetchCategories } from '../slice/CategorySlice';
// import { Link } from 'react-router-dom';
// import { AppDispatch } from '../store/Store';
// import { RootState } from '../store/Store';
// import { useParams } from 'react-router-dom';

// export interface Product {
//   imageUrl: string;
//   final_price: number;
//   id: number;
//   name: string;
//   initial_price: number;
//   discount_rate: number;
//   brand: string;
//   rating: number;
// }

// export interface Category {
//   id: number;
//   name: string;
//   imageUrl: string;
// }

// const AllProducts: React.FC = () => {
//   const dispatch: AppDispatch = useDispatch();
//   const [searchTerm, setSearchTerm] = useState('');
//   const [minPrice, setMinPrice] = useState(0);
//   const [maxPrice, setMaxPrice] = useState(1000000);
//   const [selectedBrand, setSelectedBrand] = useState('');
//   const [selectedCategory, setSelectedCategory] = useState<number | null>(null);
//   const [selectedDiscount, setSelectedDiscount] = useState<string | null>(null);
//   const { categoryId } = useParams<{ categoryId: string }>();

//   const { products, status: productStatus, error: productError } = useSelector((state: RootState) => state.product);
//   const { categories, status: categoryStatus, error: categoryError } = useSelector((state: RootState) => state.categories);

//   useEffect(() => {
//     if (categoryId) {
//       dispatch(fetchProduct(parseInt(categoryId)));
//       setSelectedCategory(parseInt(categoryId));
//     } else {
//       dispatch(fetchProduct(1));
//       setSelectedCategory(null);
//     }
//     dispatch(fetchCategories());
//   }, [dispatch, categoryId]);

//   const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
//     setSearchTerm(event.target.value);
//   };

//   const handleCategoryChange = (categoryId: number) => {
//     setSelectedCategory(categoryId);
//     dispatch(fetchProduct(categoryId));
//   };

//   const handleDiscountChange = (discountRange: string) => {
//     setSelectedDiscount(discountRange);
//   };

//   const filteredProductsByCategory = selectedCategory
//     ? products.filter(product => product.id === selectedCategory)
//     : products;

//   const allBrands = [...new Set(filteredProductsByCategory.map(product => product.brand))];

//   const maxProductPrice = Math.max(...filteredProductsByCategory.map(product => product.final_price), 1000000);

//     const filteredProducts = filteredProductsByCategory.filter(product => {
//         const discountRate = ((product.initial_price - product.final_price) / product.initial_price) * 100;
//         const isWithinPriceRange = product.final_price >= minPrice && product.final_price <= maxPrice;
//         const matchesBrand = selectedBrand ? product.brand === selectedBrand : true;
//         const matchesSearchTerm = product.name.toLowerCase().includes(searchTerm.toLowerCase());
//         const matchesDiscount = selectedDiscount
//         ? (selectedDiscount === 'below 10%' && discountRate < 10) ||
//             (selectedDiscount === 'below 20%' && discountRate < 20) ||
//             (selectedDiscount === 'below 30%' && discountRate < 30) ||
//             (selectedDiscount === '30% and more' && discountRate >= 30)
//         : true;

//         return isWithinPriceRange && matchesBrand && matchesSearchTerm && matchesDiscount;
//     });

//   if (productStatus === 'loading' || categoryStatus === 'loading') {
//     return <p>Loading...</p>;
//   }

//   if (productStatus === 'failed') {
//     return <p>Error fetching products: {productError}</p>;
//   }

//   if (categoryStatus === 'failed') {
//     return <p>Error fetching categories: {categoryError}</p>;
//   }

//   return (
//     <div>
//       <section>
//         <div className="w-full px-5 py-16 mx-auto md:px-10 md:py-24">
//           <div className="flex flex-col gap-12">
//             <div className="flex flex-col gap-5">
//               <h3 className="text-2xl font-bold md:text-5xl">Filter products</h3>
//             </div>
//             <div className="grid gap-10 md:gap-12 lg:grid-cols-[300px_1fr]">
//               <div className="mb-4 max-w-none lg:max-w-sm">
//                 <form name="wf-form-Filter-2" method="get" className="flex-col gap-6">
//                   <div className="flex items-center justify-between py-4 mb-6 border-b border-gray-300">
//                     <h5 className="text-xl font-bold">Filters</h5>
//                     <a href="#" className="text-sm"><p>Clear all</p></a>
//                   </div>
//                   <input
//                     type="text"
//                     value={searchTerm}
//                     onChange={handleSearchChange}
//                     className="block w-full py-3 pr-4 mb-10 text-sm font-bold text-gray-800 bg-gray-100 border border-gray-300 border-solid rounded-md h-9 pl-11"
//                     placeholder="Search"
//                     style={{
//                       backgroundImage: 'url("https://assets.website-files.com/6458c625291a94a195e6cf3a/64b7a3a33cd5dc368f46daaa_MagnifyingGlass.svg")',
//                       backgroundSize: '18px',
//                       backgroundRepeat: 'no-repeat',
//                       backgroundPosition: '16px center',
//                     }}
//                   />

//                   <div className="flex flex-col gap-6">
//                     <p className="font-semibold">Categories</p>
//                     <div className="flex flex-wrap items-center gap-2">
//                       {categories.map((category: Category) => (
//                         <a
//                           key={category.id}
//                           href="#"
//                           className={`flex gap-3 p-3 font-semibold rounded-md ${selectedCategory === category.id ? 'bg-gray-300' : 'bg-gray-100'}`}
//                           onClick={() => handleCategoryChange(category.id)}
//                         >
//                           <img src={category.imageUrl} className="inline-block" />
//                           {category.name}
//                         </a>
//                       ))}
//                     </div>
//                     <p className="font-semibold">Price Range</p>
//                     <div className="flex flex-col gap-2">
//                       <input
//                         type="range"
//                         min="0"
//                         max={maxProductPrice}
//                         value={minPrice}
//                         onChange={(e) => setMinPrice(parseInt(e.target.value))}
//                         className="mb-2"
//                       />
//                       <input
//                         type="range"
//                         min="0"
//                         max={maxProductPrice}
//                         value={maxPrice}
//                         onChange={(e) => setMaxPrice(parseInt(e.target.value))}
//                         className="mb-2"
//                       />
//                       <p>{`Price: Rs ${minPrice} - Rs ${maxPrice}`}</p>
//                     </div>
//                     <p className="font-semibold">Brand</p>
//                     <div className="flex flex-wrap items-center gap-2">
//                       {allBrands.map((brand) => (
//                         <label key={brand} className="flex gap-3 p-3 font-semibold bg-gray-100 rounded-md">
//                           <input
//                             type="radio"
//                             name="brand"
//                             value={brand}
//                             onChange={() => setSelectedBrand(brand)}
//                             checked={selectedBrand === brand}
//                             className="mr-2"
//                           />
//                           {brand}
//                         </label>
//                       ))}
//                     </div>
//                     <p className="font-semibold">Discount</p>
//                     <div className="flex flex-wrap items-center gap-2">
//                       {['below 10%', 'below 20%', 'below 30%', '30% and more'].map((discount) => (
//                         <label key={discount} className="flex gap-3 p-3 font-semibold bg-gray-100 rounded-md">
//                           <input
//                             type="radio"
//                             name="discount"
//                             value={discount}
//                             onChange={() => handleDiscountChange(discount)}
//                             checked={selectedDiscount === discount}
//                             className="mr-2"
//                           />
//                           {discount}
//                         </label>
//                       ))}
//                     </div>
//                   </div>
//                 </form>
//               </div>
//               <div className="p-8">
//                 <h2 className="mb-4 text-2xl font-bold">Products</h2>
//                 <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-4">
//                   {filteredProducts.map((product: Product) => {
//                     const discountRate = ((product.initial_price - product.final_price) / product.initial_price) * 100;
//                     return (
//                       <div key={product.id} className="relative overflow-hidden border border-gray-300 rounded-lg shadow-md group">
//                         <div className="relative">
//                           <img
//                             src={product.imageUrl}
//                             alt={product.name}
//                             className="object-cover w-full h-64 transition-transform duration-300 transform rounded-t-lg group-hover:scale-105"
//                           />
//                           {product.discount_rate > 0 && (
//                             <div className="absolute px-2 py-1 text-xs font-bold text-white bg-red-500 rounded-md top-2 left-2">
//                               {`${Math.round(discountRate)}% OFF`}
//                             </div>
//                           )}
//                           <div className="absolute hidden gap-2 top-2 right-2 group-hover:flex">
//                             <button className="p-2 bg-white border border-gray-300 rounded-full shadow-md">
//                               <svg
//                                 xmlns="http://www.w3.org/2000/svg"
//                                 fill="none"
//                                 viewBox="0 0 24 24"
//                                 stroke="currentColor"
//                                 className="w-6 h-6 text-gray-700"
//                               >
//                                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v9.5a2.5 2.5 0 01-1.5 2.3V21h-2v-6.2a3.5 3.5 0 00-1-6.8V4h2v2.5A1.5 1.5 0 0112 8V3z" />
//                               </svg>
//                             </button>
//                             <button className="p-2 bg-white border border-gray-300 rounded-full shadow-md">
//                               <svg
//                                 xmlns="http://www.w3.org/2000/svg"
//                                 fill="none"
//                                 viewBox="0 0 24 24"
//                                 stroke="currentColor"
//                                 className="w-6 h-6 text-gray-700"
//                               >
//                                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.293 9.293a1 1 0 00-1.414 0L12 10.586l-1.879-1.879a1 1 0 00-1.414 1.414l2.121 2.121a1 1 0 001.414 0l2.121-2.121a1 1 0 000-1.414z" />
//                               </svg>
//                             </button>
//                           </div>
//                         </div>
//                         <div className="p-4">
//                           <h3 className="text-lg font-bold">{product.name}</h3>
//                           <div className="flex items-center justify-between mt-2">
//                             <span className="text-lg font-semibold text-gray-800">
//                               Rs {parseFloat(product.final_price.toString()).toFixed(2)}
//                             </span>
//                             {product.initial_price > product.final_price && (
//                               <span className="text-sm text-gray-600 line-through">
//                                 Rs {parseFloat(product.initial_price.toString()).toFixed(2)}
//                               </span>
//                             )}
//                           </div>
//                           <div className="flex items-center mt-2">
//                             <span className="text-yellow-500">
//                               {'⭐'.repeat(Math.round(product.rating))}
//                               {'☆'.repeat(5 - Math.round(product.rating))}
//                             </span>
//                           </div>
//                           <button className="w-full py-2 mt-4 font-bold text-white bg-blue-500 rounded-md">
//                             Add to cart
//                           </button>
//                         </div>
//                       </div>
//                     );
//                   })}
//                 </div>
//               </div>
//             </div>
//           </div>
//         </div>
//       </section>
//     </div>
//   );
// };

// export default AllProducts;
